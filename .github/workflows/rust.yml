on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - "v*"

name: Rust

jobs:
  build_and_test:
    name: ${{ matrix.job.target }}
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - target: x86_64-apple-darwin
            os: macos-12
          - target: x86_64-pc-windows-gnu
            os: windows-2019
          - target: x86_64-pc-windows-msvc
            os: windows-2019
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-20.04
          - target: x86_64-unknown-linux-musl
            os: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.job.target }}
          components: clippy, rustfmt
      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.job.target }}
      - name: Rustfmt
        run: cargo fmt -- --check
      - name: Clippy
        run: cargo clippy --locked --release --all-features --target=${{ matrix.job.target }} --no-deps -- -Dwarnings
      - name: Build
        run: cargo build --locked --release --all-features --target=${{ matrix.job.target }}
        env:
          RUSTFLAGS: "-C link-arg=-s"
      - name: Test
        run: cargo test --locked --release --all-features --target=${{ matrix.job.target }}
      - name: Create package
        id: package
        shell: bash
        run: |
          set -u
          metadata="$(cargo metadata --format-version=1 --no-deps)"
          name="$(echo "${metadata}" | jq --raw-output ".packages[0].name")"
          version="$(echo "${metadata}" | jq --raw-output ".packages[0].version")"
          fullname="${name}-v${version}-${{ matrix.job.target }}"
          echo "fullname=${fullname}" >>"$GITHUB_OUTPUT"
          case ${{ matrix.job.target }} in
            *-pc-windows-*) executable="target/${{ matrix.job.target }}/release/${name}.exe" ;;
            *) executable="target/${{ matrix.job.target }}/release/${name}" ;;
          esac
          artifact_dir=".ci/${fullname}"
          mkdir -p "${artifact_dir}"
          cp "${executable}" "${artifact_dir}"
          case ${{ matrix.job.target }} in
            *-pc-windows-*) artifact="${artifact_dir}.zip" ;;
            *) artifact="${artifact_dir}.tar.gz" ;;
          esac
          echo "artifact=${artifact}" >>"$GITHUB_OUTPUT"
          pushd "${artifact_dir}" >/dev/null
          case ${{ matrix.job.target }} in
            *-pc-windows-*) 7z -y a ../../"${artifact}" * ;;
            *) tar czf ../../"${artifact}" * ;;
          esac
          popd >/dev/null
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.package.outputs.fullname }}
          path: ${{ steps.package.outputs.artifact }}
          if-no-files-found: error
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          generate_release_notes: true
          files: |
            ${{ steps.package.outputs.artifact }}
